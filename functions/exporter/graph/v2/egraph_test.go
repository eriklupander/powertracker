package v2

import (
	"github.com/ahmetb/go-linq/v3"
	"github.com/eriklupander/powertracker/functions/exporter/aggregator"
	"github.com/eriklupander/powertracker/functions/exporter/model"
	"github.com/eriklupander/powertracker/functions/exporter/testutil"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/types"
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"os"
	"testing"
)

func TestBarChart(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/usage-210326-210403-1h.csv")

	data, err := BarChart(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}

func TestBarChartHourlyOverTime(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/usage-210326-210403-1h.csv")

	data, err := BarChartOverTime(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}

func TestLineWithLabel(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/usage-210326-210403-1h.csv")
	data, err := LineChart(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}
func TestLineWithLabelMay5m(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/may.csv")
	entries = aggregator.Aggregate5m(entries)

	data, err := LineChart(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}
func TestLineWithLabelMay1h(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/may.csv")
	entries, err := aggregator.Aggregate1h(entries)
	assert.NoError(t, err)

	data, err := LineChart(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}
func TestLineWithLabelMayPerDay(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/may.csv")
	entries, err := aggregator.Aggregate1D(entries)
	assert.NoError(t, err)

	data, err := LineChart(entries)
	assert.NoError(t, err)
	assert.NotEmpty(t, data)
	toFile(t.Name(), data)
}
func toFile(name string, data []byte) {
	_ = ioutil.WriteFile(name + ".html", data, os.FileMode(0755))
}

func TestCombined(t *testing.T) {
	entries := testutil.LoadEntriesFromCSV(t, "../../testdata/usage-210326-210403-1h.csv")
	xData := make([]string, 0)
	bData := make([]string, 0)
	barData := make([]opts.BarData, 0)
	lineData := make([]opts.LineData, 0)
	for _, ex := range entries {
		e := ex
		xData = append(xData, e.Created.Local().Format("060102"))
		lineData = append(lineData, opts.LineData{Value: e.CurrentUsage})
	}

	linq.From(entries).
		GroupByT(func(e model.Entry) string {
			return e.Created.Local().Format("060102")
		}, func(e model.Entry) float64 {
			return e.CurrentUsage
		}).
		SortT(func(i, j linq.Group) bool {
			return i.Key.(string) < j.Key.(string)
		}).
		ForEachT(func(group linq.Group) {
			bData = append(bData, group.Key.(string))
			barData = append(barData, opts.BarData{Value: linq.From(group.Group).Average()})
		})

	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithInitializationOpts(opts.Initialization{Theme: types.ThemeRoma}),
		charts.WithTitleOpts(opts.Title{
			Title:    "Average energy usage per hour (watts)",
			Subtitle: "",
			Link:     "https://github.com/go-echarts/go-echarts",
		}),
		charts.WithTooltipOpts(opts.Tooltip{Show: true}),
	)
	line.SetXAxis(xData).
		AddSeries("Energy usage (Watts)", lineData)

	bar := charts.NewBar()
	bar.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}),
		charts.WithTitleOpts(opts.Title{Title: "tooltip options"}),
		charts.WithTooltipOpts(opts.Tooltip{Show: true}),
		charts.WithLegendOpts(opts.Legend{Right: "80%"}),
	)
	bar.SetXAxis(bData).
		AddSeries("Energy usage 2 (Watts)", barData)
	bar.Overlap(line)
	// Where the magic happens
	f, _ := os.Create("bar-line.html")
	assert.NoError(t, bar.Render(f))
}
